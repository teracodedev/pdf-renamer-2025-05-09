# バイトコンパイル済み / 最適化 / DLLファイル
__pycache__/
*.py[cod]
*$py.class

# C拡張
*.so

# 配布 / パッケージング
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  通常、これらのファイルはPythonスクリプトからテンプレートを使用して作成され、
#  PyInstallerがexeを構築する際に日付やその他の情報を注入します
*.manifest
*.spec

# インストーラーログ
pip-log.txt
pip-delete-this-directory.txt

# ユニットテスト / カバレッジレポート
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# 翻訳
*.mo
*.pot

# Djangoの設定
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flaskの設定
instance/
.webassets-cache

# Scrapyの設定
.scrapy

# Sphinx文書
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   ライブラリやパッケージの場合、複数の環境で実行されることを
#   意図しているため、これらのファイルを無視することをお勧めします
# .python-version

# pipenv
#   pypa/pipenv#598によると、バージョン管理にPipfile.lockを含めることが推奨されています。
#   ただし、プラットフォーム固有の依存関係やクロスプラットフォームサポートがない依存関係がある場合、
#   pipenvは動作しない依存関係をインストールしたり、必要な依存関係をすべてインストールしなかったりする可能性があります。
#Pipfile.lock

# UV
#   Pipfile.lockと同様に、一般的にuv.lockをバージョン管理に含めることが推奨されています。
#   これは特にバイナリパッケージの再現性を確保するために推奨されており、
#   ライブラリでは一般的に無視されることが多いです。
#uv.lock

# poetry
#   Pipfile.lockと同様に、poetry.lockをバージョン管理に含めることが一般的に推奨されています。
#   これは特にバイナリパッケージの再現性を確保するために推奨されており、
#   ライブラリでは一般的に無視されることが多いです。
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Pipfile.lockと同様に、pdm.lockをバージョン管理に含めることが一般的に推奨されています。
#pdm.lock
#   pdmはプロジェクト全体の設定を.pdm.tomlに保存しますが、バージョン管理に含めないことが推奨されています。
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; github.com/David-OConnor/pyflow や github.com/pdm-project/pdm などで使用
__pypackages__/

# Celery関連
celerybeat-schedule
celerybeat.pid

# SageMath解析ファイル
*.sage.py

# 環境設定
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyderプロジェクト設定
.spyderproject
.spyproject

# Ropeプロジェクト設定
.ropeproject

# mkdocs文書
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre型チェッカー
.pyre/

# pytype静的型アナライザ
.pytype/

# Cythonデバッグシンボル
cython_debug/

# PyCharm
#  JetBrains固有のテンプレートは、
#  https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore で管理されており、
#  グローバルなgitignoreに追加したり、このファイルにマージしたりすることができます。
#  より核心的なオプション（推奨されません）として、以下のコメントを解除してideaフォルダ全体を無視することもできます。
#.idea/

# VSCode設定
.vscode/

# PyPI設定ファイル
.pypirc

# PDFリネームツール固有のファイル
# ----------------------------

# 設定ファイル（APIキーなどの機密情報を含む）
.env

# ルール設定ファイル（組織固有のルールを含む可能性あり）
rename_rules.yaml

# 一時ファイルディレクトリ
temp_images/
jpeg/

# ログファイル
pdf_renamer.log
*.log

# Google Cloud認証情報
*.json

# サンプル/テスト用PDF
sample_pdfs/
test_pdfs/

# ビルド成果物
build/
dist/
*.exe